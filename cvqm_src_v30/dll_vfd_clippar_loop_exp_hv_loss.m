function par = dll_vfd_clippar_loop_exp_hv_loss(datahv, datahvo, ...
    datahvb, datahvbo, data_yrms, data_contm)
% DLL_VFD_CLIPPAR_LOOP_EXP_HV_LOSS
%  Computes the vfd_exp_hv_loss_below5%_mean_square_clip_0.06 parameter
%  (i.e., par) of the VQM_VFD model.  This function takes in various
%  features of the video clips already extracted before this subroutine is
%  run.  Because this is a dll function, it can access information about
%  the video clips using other dll functions.  The returned value will be
%  the parameter calculated in this subroutine for the processed clip.
%
% SYNTAX
%  par = dll_vfd_clippar_loop_exp_hv_loss(datahv, datahvo, datahvb, ...
%       datahvbo, data_yrms, data_contm);
% DESCRIPTION
%  This function uses features generated by
%  dll_Vfd_feature_loop_si_hv_adatpt, vfd_feature_loop_ti, and
%  vfd_feature_loop_cont.  In particular, the following features are used:
%  1. feature_Y_vfd_hvA_0.4deg_0.2s_mean (datahv, datahvo)
%  2. feature_Y_vfd_hvbarA_0.4deg_0.2s_mean (datahvb, datahvbo)
%  3. feature_Y_vfd_ti_0.4deg_0.2s_rms (data_yrms)
%  4. feature_Y_vfd_0.4deg_0.2s_mean (data_contm)
%  The hv_loss ST BLOCK parameters are weighted by quadratic motion and
%  intensity functions of the processed clip before spatial and temporal
%  collasping. The reason being that low/high motion and low/high intensity
%  blocks should have less weight than mid-level motion and intensity. The
%  general model's minimum thresholds, ST collapsing functions, parameter
%  squaring, and final parameter clipping thresholds are all used.
%


%  Define the minimum threshold on HV and HVB features before dividing,
%  same as general model.
minthreshold = 3;

%  Define the spatial and temporal collasping functions, same as general
%  model.
spatial = 'below5%';
temporal = 'mean';

%  Define the final parameter clipping threshold after squaring.
clipthreshold = 0.06;

% Parameters for quadratic intensity weighting (x, y): (0, ci), (di, 1),
% (2di, ci):  y = ai*x.^2 + bi*x + ci
% The amount of intensity reduction is limited to li.
di = 100.0;  % Peak location of intensity function : (di, 1.0)
ci = 0.64;  % Intensity reduction at 0 and 2di (1.0 at di)
li = 0.40;  % Limit on intensity reduction
ai = (ci-1)/di^2;
bi = 2*(1-ci)/di;

% Parameters for quadractic motion weighting
dm = 23.0;  % Peak location of motion function : (dm, 1.0)
cm = 0.75;  % Motion reduction at 0 and 2dm (1.0 at dm)
lm = 0.3;  % Limit on motion reduction
am = (cm-1)/dm^2;
bm = 2*(1-cm)/dm;

% Intensity features
intensity = data_contm;

% Motion features
motion = data_yrms;

% HV features
hv = datahv;
hvo = datahvo;

% HVB features
hvb = datahvb;
hvbo = datahvbo;

%  Calculate the intensity/motion block weighting for the pars.
wint = ai*intensity.^2 + bi*intensity + ci;
wint = max(wint,li);  % limit intensity reduction to li
wmot = am*motion.^2 + bm*motion + cm;
wmot = max(wmot,lm);  % limit motion reduction to lm
weight = wint.*wmot;
clear intensity motion wint wmot;

%  Calculate the hv_loss BLOCK parameter, same as general model.
this_par = compare_dual_feature(hvo, hvbo, hv, hvb, 'minthreshold', minthreshold, 'divide', 'compare','ratio_loss');
this_par = this_par.*weight;
clear weight;
[trows, tcols, tsamps] = size(this_par);
this_par = reshape(this_par, trows*tcols, tsamps);
this_par = st_collapse(spatial, this_par);
this_par = st_collapse(temporal, this_par);
this_par = max(this_par.^2, clipthreshold) - clipthreshold;

par = this_par;










